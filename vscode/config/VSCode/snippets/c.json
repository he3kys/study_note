{
	"rt_sem_init":{
		"description": "信号量初始化",
		"prefix": "semi",
		"body": [
			"err=rt_sem_init(&$1,\"$2\",$3,RT_IPC_FLAG_FIFO);",
			"if(err != RT_EOK)",
			"{",
			"    rt_kprintf(\"trig $2 test sem init fail !\\n\");",
			"    RT_ASSERT(err == RT_EOK);",
			"}",
			"$0"
		]
	},
	"rt_sem_take : waiting forever":{
		"description": "永久等待一个信号量",
		"prefix": "semtwf",
		"body": [
			"rt_sem_take(&$1, RT_WAITING_FOREVER);",
			"$0"
		]
	},
	"rt_sem_take : waiting n ms":{
		"description": "等待信号量n ms",
		"prefix": "semtwnm",
		"body": [
			"err = rt_sem_take(&$1, MSec($2));",
			"$0"
		]
	},
	"rt_sem_trytake":{
		"description": "清空信号量",
		"prefix": "semtt",
		"body": [
			"while(rt_sem_trytake(&$1)==RT_EOK);",
			"$0"
		]
	},
	"rt_thread_init":{
		"description": "线程初始化:包括变量定义，初始化，线程入口函数创建",
		"prefix": "threadi",
		"body": [
			"#define RT_$1_THREAD_PRIO 21",
			"struct rt_thread $2_thread;",
			"rt_uint8_t $2_stack[1024];",
			"extern void $2_thread_entry(void *parameter);",
			"$0",
			"result = rt_thread_init(&$2_thread,\"$2\", $2_thread_entry, RT_NULL, (rt_uint8_t *)&$2_stack[0], sizeof($2_stack), RT_$1_THREAD_PRIO, 20);",
			"if (result == RT_EOK)",
			"{",
			"    rt_thread_startup(&$2_thread);",
			"    rt_kprintf(\"$2 thread start \\n\");",
			"}",
			"",
			"void $2_thread_entry(void *parameter)",
			"{",
			"    while(1)",
			"    {",
			"        rt_thread_delay(MSec(10));",
			"    }",
			"}"
		]
	},
	"variable : rt_semaphore":{
		"description": "定义一个信号量",
		"prefix": "vsem",
		"body": [
			"struct rt_semaphore $1;",
			"$0"
		]
	},
	"variable : err":{
		"description": "定义局部变量err",
		"prefix": "verr",
		"body": [
			"rt_err_t err;",
			"$0"]
	},
	"rt_thread_delay ms":{
		"description": "调用rt_thread_delay进行ms级延时",
		"prefix": "rtdm",
		"body": [
			"rt_thread_delay(MSec($1));"]
	},	
}
